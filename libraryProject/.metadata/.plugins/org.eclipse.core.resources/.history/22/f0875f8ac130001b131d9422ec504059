package libraryProject;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import net.proteanit.sql.DbUtils;

public class ViewBooks extends Canvas {
	public static void ViewBook() {
		JFrame f = new JFrame("Books Available");

		String outputFile = "serializationdemo.txt";
		// following code reads into the file

		ArrayList list;

		BooksParameters defNext = null;
		DefaultTableModel model = new DefaultTableModel();
		// The 0 argument is number rows.

		//JTable table = new JTable(tableModel);
		// Deserialize from a file into an object.
		// SerializationDef defNext = null;
		try {
			ArrayList<BooksParameters> namesList = new ArrayList<BooksParameters>();
			list = (ArrayList) SerializationLib.doDeserialize(outputFile);
			// System.out.println("def():\n --"+"\n |\n "+def);

			namesList = (ArrayList<BooksParameters>) list;
			System.out.println(System.lineSeparator());

			ArrayList<String> columns = new ArrayList<String>();
			ArrayList<String[]> values = new ArrayList<String[]>();
			columns.add("BookName");
			columns.add("Genre");
			columns.add("Price");

			/*
			 * for (int i = 0; i < namesList.size(); i++) { Object[] rowData = new
			 * Object[4]; rowData[0] = namesList.get(i).bname;
			 * 
			 * rowData[1] = namesList.get(i).genre; rowData[2] = namesList.get(i).price;
			 * 
			 * model.addRow(rowData); // jTable = new JTable(model);
			 * 
			 * System.out.println(namesList.get(i).bname);
			 * System.out.println(namesList.get(i).genre);
			 * System.out.println(namesList.get(i).price);
			 * 
			 * 
			 * 
			 * }
			 */
			for (int i = 0; i < namesList.size(); i++) {
				values.add(new String[] { namesList.get(i).bname ,  namesList.get(i).genre, namesList.get(i).price });
			}

			TableModel tableModel = new DefaultTableModel(values.toArray(new Object[][] {}), columns.toArray());
			JTable table = new JTable(tableModel);
			// TestJFrame testJFrame = new TestJFrame();
			// table = new JTable(model);
			JScrollPane scrollPane = new JScrollPane(table);

			f.add(scrollPane);
			f.setSize(800, 400);
			f.setVisible(true);
			f.setLocationRelativeTo(null);

//

		} catch (ClassNotFoundException | IOException e) {
			e.printStackTrace();
		}

		/*
		 * try { FileInputStream fileIn = new FileInputStream("books_lms.ser");
		 * ObjectInputStream in = new ObjectInputStream(fileIn);
		 * 
		 * while(fileIn.available() > 0) { try { e = (BooksParameters) in.readObject();
		 * System.out.println("Name: " + e.bname.toString());
		 * System.out.println("Name: " + e.genre.toString());
		 * System.out.println("Name: " + e.price.toString()); //
		 * JOptionPane.showMessageDialog(null, "People:" + rper, "Saved Persons",
		 * JOptionPane.INFORMATION_MESSAGE); } catch (ClassNotFoundException ex) {
		 * ex.printStackTrace(); } } in.close(); fileIn.close(); } catch (IOException
		 * ez) { ez.printStackTrace(); }
		 */
		/*
		 * e = (BooksParameters) in.readObject(); in.close(); fileIn.close(); } catch
		 * (IOException i) { i.printStackTrace(); return; } catch
		 * (ClassNotFoundException c) { System.out.println("Employee class not found");
		 * c.printStackTrace(); return; } for(int i=0; i <2 ;i++) {
		 * System.out.println("Name: " + e.bname.toString());
		 * System.out.println("Name: " + e.genre.toString());
		 * System.out.println("Name: " + e.price.toString()); }
		 */
		/*
		 * System.out.println("Address: " + e.address); System.out.println("SSN: " +
		 * e.SSN); System.out.println("Number: " + e.number);
		 */

		/*
		 * try { FileReader reader = new FileReader("booksdata.txt"); int character;
		 * 
		 * while ((character = reader.read()) != -1) { System.out.print((char)
		 * character); } reader.close();
		 * 
		 * } catch (IOException e) { e.printStackTrace(); }
		 */

		/*
		 * Connection connection = DbConnection.connect(); String
		 * sql="select * from books"; try { Statement stmt =
		 * connection.createStatement(); stmt.executeUpdate("USE Library");
		 * stmt=connection.createStatement(); ResultSet rs=stmt.executeQuery(sql);
		 * JTable book_list= new JTable();
		 * book_list.setModel(DbUtils.resultSetToTableModel(rs));
		 * 
		 * JScrollPane scrollPane = new JScrollPane(book_list);
		 * 
		 * f.add(scrollPane); f.setSize(800, 400); f.setVisible(true);
		 * f.setLocationRelativeTo(null); } catch (SQLException e1) {
		 * 
		 * JOptionPane.showMessageDialog(null, e1); }
		 */
	}
}
